package pkg

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"golang.org/x/net/html"
)

var hitmissindicator map[string]int
var cachebuster map[string]int

func init() {
	hitmissindicator = map[string]int{
		"x-cache":             0,
		"cf-cache-status":     0,
		"x-drupal-cache":      0,
		"x-varnish-cache":     0,
		"akamai-cache-status": 0,
		"server-timing":       0,
		"X-Iinfo":             0,
		"age":                 0,
		"time":                0,
		"none":                0,
		"total":               0,
	}
	cachebuster = map[string]int{
		"parameter": 0,
		"cookie":    0,
		"header":    0,
	}
}

/* Check if the parameter "cb" (or any other defined by flag -cb), the header "origin" or any cookie can be used as cachebuster */
func CheckCache() (CacheStruct, []error) {
	// TODO: add time as cachebust indicator?

	var cache CacheStruct
	var errSlice []error

	for key, val := range Config.Website.Headers {
		switch strings.ToLower(key) {
		case "cache-control", "pragma":
			msg := fmt.Sprintf("%s header was found: %s \n", key, val)
			PrintVerbose(msg, NoColor, 1)
		case "x-cache", "cf-cache-status", "x-drupal-cache", "x-varnish-cache", "akamai-cache-status", "server-timing", "X-Iinfo":
			cache.Indicator = key
			msg := fmt.Sprintf("%s header was found: %s \n", key, val)
			PrintVerbose(msg, NoColor, 1)
			hitmissindicator[strings.ToLower(key)] += 1
		case "age":
			// only set it it wasn't set to x-cache or sth. similar beforehand
			if cache.Indicator == "" {
				cache.Indicator = key
				msg := fmt.Sprintf("%s header was found: %s\n", key, val)
				PrintVerbose(msg, NoColor, 1)
				if cache.Indicator == "" {
					cache.Indicator = "age"
				}
				hitmissindicator["age"] += 1
			}
		}
	}
	if cache.Indicator == "" {
		hitmissindicator["none"] += 1
	}
	hitmissindicator["total"] += 1

	alwaysMiss := false
	var err error
	if cache.Indicator == "" {
		msg := "No x-cache (or other cache hit/miss header) header was found\nThe time will be measured as cache hit/miss indicator\n"
		Print(msg, Yellow)
	} else {
		alwaysMiss, err = checkIfAlwaysMiss(cache)
		if err != nil {
			errSlice = append(errSlice, err)
		}
	}

	if !alwaysMiss {
		// Check first if a parameter can be used as cachebuster
		err = cachebusterParameter(&cache)
		if err != nil {
			errSlice = append(errSlice, err)
		}

		// Check second if a header can be used as cachebuster
		//if !cache.CBwasFound { auskommentiert für statistik bei BA
		err = cachebusterHeader(&cache)
		if err != nil {
			errSlice = append(errSlice, err)
		}
		//}

		// Check third if a cookie can be used as cachebuster
		//if !cache.CBwasFound { auskommentiert für statistik bei BA
		err = cachebusterCookie(&cache)
		if err != nil {
			errSlice = append(errSlice, err)
		}
		//}

		if cache.CBwasFound && cache.Indicator == "" {
			hitmissindicator["none"] -= 1
			hitmissindicator["time"] += 1
		}
		if cache.CBisParameter {
			cachebuster["parameter"] += 1
		}
		if cache.CBisCookie {
			cachebuster["cookie"] += 1
		}
		if cache.CBisHeader {
			cachebuster["header"] += 1
		}

		msg := fmt.Sprintf("%+v\n%+v\n", hitmissindicator, cachebuster)
		PrintVerbose(msg, NoColor, 1)
	}

	if cache.Indicator == "" && !cache.TimeIndicator {
		msg := "No cache indicator could be found"
		Print(msg+"\n", Yellow)
		if !Config.Force {
			msg2 := "Use -f/-force to force the test\n"
			Print(msg2, Yellow)
		}

		errSlice = append(errSlice, errors.New(strings.ToLower(msg)))
		return cache, errSlice
	}

	if !cache.CBwasFound {
		msg := "No valid cachebuster could be found\n"
		Print(msg, Yellow)
	}

	if !cache.CBwasFound && !Config.Force {
		msg := "Use -f/-force to force the test\n"
		Print(msg, Yellow)
	}

	return cache, errSlice
}

func checkIfAlwaysMiss(cache CacheStruct) (bool, error) {
	errorString := "checkIfCacheAlwaysMiss: "
	identifier := errorString

	var req *http.Request
	var err error

	weburl := Config.Website.Url.String()
	if Config.DoPost {
		req, err = http.NewRequest("POST", weburl, bytes.NewBufferString(Config.Body))
	} else {
		req, err = http.NewRequest("GET", weburl, nil)
	}
	if err != nil {
		msg := errorString + err.Error() + "\n"
		Print(msg, Red)
		return false, errors.New(msg)
	}

	setRequest(req, Config.DoPost, "", http.Cookie{})

	waitLimiter(errorString)
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		msg := errorString + err.Error() + "\n"
		Print(msg, Red)
		return false, errors.New(msg)
	}
	defer resp.Body.Close()

	firstUnix := time.Now().Unix()

	if resp.StatusCode != Config.Website.StatusCode {
		msg := errorString + fmt.Sprintf("Unexpected Status Code %d\n", resp.StatusCode)
		Print(msg, Yellow)
	}

	setRequest(req, Config.DoPost, "", http.Cookie{})

	waitLimiter(errorString)

	secondUnix := time.Now().Unix()
	timeDiff := secondUnix - firstUnix
	// make sure that there is at least 2 sec difference.
	// So that first req has Age=0 and second req has Age>=2
	if timeDiff <= 1 && strings.EqualFold("age", cache.Indicator) {
		time.Sleep(2 * time.Second)
	}

	resp, err = http.DefaultClient.Do(req)
	if err != nil {
		msg := errorString + err.Error() + "\n"
		Print(msg, Red)
		return false, errors.New(msg)
	}
	defer resp.Body.Close()

	if resp.StatusCode != Config.Website.StatusCode {
		msg := fmt.Sprintf("Unexpected Status Code %d\n", resp.StatusCode)
		Print(msg, Yellow)
	}

	indicValue := strings.TrimSpace(strings.ToLower(resp.Header.Get(cache.Indicator)))
	if checkCacheMiss(indicValue) {
		msg := fmt.Sprintf("%sreturns always a miss, even if requests are identical\n", identifier)
		Print(msg, Yellow)
		return true, errors.New(msg)
	}

	return false, nil
}

func cachebusterCookie(cache *CacheStruct) error {
	for i, c := range Config.Website.Cookies {
		errorString := "cachebusterCookie with " + c.Name + ": "
		identifier := "Cookie " + c.Name + " as Cachebuster"

		var req *http.Request
		var err error

		if cache.Indicator == "" {
			var newCookie http.Cookie
			var times []int64
			for i := 0; i < 5*2; i++ {
				weburl := Config.Website.Url.String()
				if Config.DoPost {
					req, err = http.NewRequest("POST", weburl, bytes.NewBufferString(Config.Body))
				} else {
					req, err = http.NewRequest("GET", weburl, nil)
				}
				if err != nil {
					msg := errorString + err.Error() + "\n"
					Print(msg, Red)
					return errors.New(msg)
				}

				if i%2 == 0 {
					newCookie = *c
					newCookie.Value = randInt()
				}
				setRequest(req, Config.DoPost, "", newCookie)

				waitLimiter(errorString)
				start := time.Now()
				resp, err := http.DefaultClient.Do(req)
				elapsed := time.Since(start).Milliseconds()
				times = append(times, elapsed)
				if err != nil {
					msg := errorString + err.Error() + "\n"
					Print(msg, Red)
					return errors.New(msg)
				}
				defer resp.Body.Close()

				if resp.StatusCode != Config.Website.StatusCode {
					msg := errorString + fmt.Sprintf("Unexpected Status Code %d\n", resp.StatusCode)
					Print(msg, Yellow)
				}
			}
			msg := fmt.Sprintf("measured times: %d\n", times)
			Print(msg, NoColor)
			for i := range times {
				// Cache miss has to take 30ms longer than cache hit
				if i%2 == 1 && times[i-1]-times[i] < 30 {
					msg := fmt.Sprintf("%s was not successful (Cookie)\n", identifier)
					Print(msg, NoColor)
					return nil
				}
			}
			cache.TimeIndicator = true
			cache.CBwasFound = true
			cache.CBisCookie = true
			cache.CBName = Config.Website.Cookies[i].Name

			msg = fmt.Sprintf("%s was successful (Cookie, time was used as indicator)\n", identifier)
			Print(msg, Blue)
		} else {
			weburl := Config.Website.Url.String()
			if Config.DoPost {
				req, err = http.NewRequest("POST", weburl, bytes.NewBufferString(Config.Body))
			} else {
				req, err = http.NewRequest("GET", weburl, nil)
			}
			if err != nil {
				msg := errorString + err.Error() + "\n"
				Print(msg, Red)
				return errors.New(msg)
			}

			newCookie := *c
			newCookie.Value = randInt()
			setRequest(req, Config.DoPost, "", newCookie)

			waitLimiter(errorString)
			resp, err := http.DefaultClient.Do(req)
			if err != nil {
				msg := errorString + err.Error() + "\n"
				Print(msg, Red)
				return errors.New(msg)
			}
			defer resp.Body.Close()

			firstUnix := time.Now().Unix()

			if resp.StatusCode != Config.Website.StatusCode {
				msg := errorString + fmt.Sprintf("Unexpected Status Code %d\n", resp.StatusCode)
				Print(msg, Yellow)
			}

			indicValue := strings.TrimSpace(strings.ToLower(resp.Header.Get(cache.Indicator)))
			if !checkCacheMiss(indicValue) {
				msg := fmt.Sprintf("%s was not successful (Cookie)\n", identifier)
				Print(msg, NoColor)
			} else {
				if Config.DoPost {
					req, err = http.NewRequest("POST", weburl, bytes.NewBufferString(Config.Body))
				} else {
					req, err = http.NewRequest("GET", weburl, nil)
				}
				if err != nil {
					msg := errorString + err.Error() + "\n"
					Print(msg, Red)
					return errors.New(msg)
				}

				c.Value = randInt()
				setRequest(req, Config.DoPost, "", *c)

				waitLimiter(errorString)

				secondUnix := time.Now().Unix()
				timeDiff := secondUnix - firstUnix
				// make sure that there is at least 2 sec difference.
				// So that first req has Age=0 and second req has Age>=2
				if timeDiff <= 1 && strings.EqualFold("age", cache.Indicator) {
					time.Sleep(2 * time.Second)
				}

				resp, err = http.DefaultClient.Do(req)
				if err != nil {
					msg := errorString + err.Error() + "\n"
					Print(msg, Red)
					return errors.New(msg)
				}
				defer resp.Body.Close()

				if resp.StatusCode != Config.Website.StatusCode {
					msg := fmt.Sprintf("Unexpected Status Code %d\n", resp.StatusCode)
					Print(msg, Yellow)
				}

				indicValue = strings.TrimSpace(strings.ToLower(resp.Header.Get(cache.Indicator)))
				if checkCacheHit(indicValue) {
					msg := fmt.Sprintf("%s was not successful (Cookie)\n", identifier)
					Print(msg, NoColor)
				} else {
					cache.CBwasFound = true
					cache.CBisCookie = true
					cache.CBName = Config.Website.Cookies[i].Name

					msg := fmt.Sprintf("%s was successful (Cookie)\n", identifier)
					Print(msg, Blue)

					break
				}
			}
		}
	}

	return nil
}

func cachebusterHeader(cache *CacheStruct) error {
	headers := []string{"Origin"}

	for _, header := range headers {
		errorString := "cachebusterHeader with " + header + ": "
		identifier := "Header " + header + " as Cachebuster"

		var req *http.Request
		var err error

		if cache.Indicator == "" {
			var times []int64
			for i := 0; i < 5*2; i++ {
				weburl := Config.Website.Url.String()
				if Config.DoPost {
					req, err = http.NewRequest("POST", weburl, bytes.NewBufferString(Config.Body))
				} else {
					req, err = http.NewRequest("GET", weburl, nil)
				}
				if err != nil {
					msg := errorString + err.Error() + "\n"
					Print(msg, Red)
					return errors.New(msg)
				}

				setRequest(req, Config.DoPost, "", http.Cookie{})
				if i%2 == 0 {
					cb := randInt()
					if h := req.Header.Get(header); h != "" {
						msg := fmt.Sprintf("Overwriting %s:%s with %s:%s\n", header, h, header, cb)
						Print(msg, NoColor)
					}
					req.Header.Set(header, cb)
				}

				waitLimiter(errorString)
				start := time.Now()
				resp, err := http.DefaultClient.Do(req)
				elapsed := time.Since(start).Milliseconds()
				times = append(times, elapsed)
				if err != nil {
					msg := errorString + err.Error() + "\n"
					Print(msg, Red)
					return errors.New(msg)
				}
				defer resp.Body.Close()

				if resp.StatusCode != Config.Website.StatusCode {
					msg := errorString + fmt.Sprintf("Unexpected Status Code %d\n", resp.StatusCode)
					Print(msg, Yellow)
				}
			}
			msg := fmt.Sprintf("measured times: %d\n", times)
			Print(msg, NoColor)
			for i := range times {
				// Cache miss has to take 30ms longer than cache hit
				if i%2 == 1 && times[i-1]-times[i] < 30 {
					msg := fmt.Sprintf("%s was not successful (Header)\n", identifier)
					Print(msg, NoColor)
					return nil
				}
			}
			cache.TimeIndicator = true
			cache.CBwasFound = true
			cache.CBisHeader = true
			cache.CBName = header

			msg = fmt.Sprintf("%s was successful (Header, time was used as indicator)\n", identifier)
			Print(msg, Blue)
		} else {
			weburl := Config.Website.Url.String()
			if Config.DoPost {
				req, err = http.NewRequest("POST", weburl, bytes.NewBufferString(Config.Body))
			} else {
				req, err = http.NewRequest("GET", weburl, nil)
			}
			if err != nil {
				msg := errorString + err.Error() + "\n"
				Print(msg, Red)
				return errors.New(msg)
			}

			setRequest(req, Config.DoPost, "", http.Cookie{})
			cb := randInt()
			if h := req.Header.Get(header); h != "" {
				msg := fmt.Sprintf("Overwriting %s:%s with %s:%s\n", header, h, header, cb)
				Print(msg, NoColor)
			}
			req.Header.Set(header, cb)

			waitLimiter(errorString)
			resp, err := http.DefaultClient.Do(req)
			if err != nil {
				msg := errorString + err.Error() + "\n"
				Print(msg, Red)
				return errors.New(msg)
			}
			defer resp.Body.Close()

			firstUnix := time.Now().Unix()

			if resp.StatusCode != Config.Website.StatusCode {
				msg := errorString + fmt.Sprintf("Unexpected Status Code %d\n", resp.StatusCode)
				Print(msg, Yellow)
			}

			indicValue := strings.TrimSpace(strings.ToLower(resp.Header.Get(cache.Indicator)))
			if !checkCacheMiss(indicValue) {
				msg := fmt.Sprintf("%s was not successful (Header)\n", identifier)
				Print(msg, NoColor)
			} else {

				if Config.DoPost {
					req, err = http.NewRequest("POST", weburl, bytes.NewBufferString(Config.Body))
				} else {
					req, err = http.NewRequest("GET", weburl, nil)
				}
				if err != nil {
					msg := errorString + err.Error() + "\n"
					Print(msg, Red)
					return errors.New(msg)
				}

				setRequest(req, Config.DoPost, "", http.Cookie{})
				cb := randInt()
				if h := req.Header.Get(header); h != "" {
					msg := fmt.Sprintf("Overwriting %s:%s with %s:%s\n", header, h, header, cb)
					Print(msg, NoColor)
				}
				req.Header.Set(header, cb)

				waitLimiter(errorString)

				secondUnix := time.Now().Unix()
				timeDiff := secondUnix - firstUnix
				// make sure that there is at least 2 sec difference.
				// So that first req has Age=0 and second req has Age>=2
				if timeDiff <= 1 && strings.EqualFold("age", cache.Indicator) {
					time.Sleep(2 * time.Second)
				}

				resp, err = http.DefaultClient.Do(req)
				if err != nil {
					msg := errorString + err.Error() + "\n"
					Print(msg, Red)
					return errors.New(msg)
				}
				defer resp.Body.Close()

				if resp.StatusCode != Config.Website.StatusCode {
					msg := fmt.Sprintf("Unexpected Status Code %d\n", resp.StatusCode)
					Print(msg, Yellow)
				}

				indicValue = strings.TrimSpace(strings.ToLower(resp.Header.Get(cache.Indicator)))
				if checkCacheHit(indicValue) {
					msg := fmt.Sprintf("%s was not successful (Header)\n", identifier)
					Print(msg, NoColor)
				} else {
					cache.CBwasFound = true
					cache.CBisHeader = true
					cache.CBName = header
					msg := fmt.Sprintf("%s was successful (Header)\n", identifier)
					Print(msg, Blue)

					break
				}
			}
		}
	}

	return nil
}

func cachebusterParameter(cache *CacheStruct) error {
	errorString := "cachebusterParameter: "
	identifier := "Parameter " + Config.CacheBuster + " as Cachebuster"

	var req *http.Request
	var err error

	if cache.Indicator == "" {
		var urlCb string
		var times []int64
		for i := 0; i < 5*2; i++ {
			if i%2 == 0 {
				urlCb, _ = addCachebusterParameter(Config.Website.Url.String(), "")
			}
			if Config.DoPost {
				req, err = http.NewRequest("POST", urlCb, bytes.NewBufferString(Config.Body))
			} else {
				req, err = http.NewRequest("GET", urlCb, nil)
			}
			if err != nil {
				msg := errorString + err.Error() + "\n"
				Print(msg, Red)
				return errors.New(msg)
			}

			setRequest(req, Config.DoPost, "", http.Cookie{})

			waitLimiter(errorString)
			start := time.Now()
			resp, err := http.DefaultClient.Do(req)
			elapsed := time.Since(start).Milliseconds()
			times = append(times, elapsed)
			if err != nil {
				msg := errorString + err.Error() + "\n"
				Print(msg, Red)
				return errors.New(msg)
			}
			defer resp.Body.Close()

			if resp.StatusCode != Config.Website.StatusCode {
				msg := errorString + fmt.Sprintf("Unexpected Status Code %d\n", resp.StatusCode)
				Print(msg, Yellow)
			}
		}
		msg := fmt.Sprintf("measured times: %d\n", times)
		Print(msg, NoColor)
		for i := range times {
			// Cache miss has to take 30ms longer than cache hit
			if i%2 == 1 && times[i-1]-times[i] < 30 {
				msg := fmt.Sprintf("%s was not successful (Parameter)\n", identifier)
				Print(msg, NoColor)
				return nil
			}
		}
		cache.TimeIndicator = true
		cache.CBwasFound = true
		cache.CBisParameter = true
		cache.CBName = Config.CacheBuster
		msg = fmt.Sprintf("%s was successful (Parameter, time was used as indicator)\n", identifier)
		Print(msg, Blue)
	} else {

		urlCb, _ := addCachebusterParameter(Config.Website.Url.String(), "")

		if Config.DoPost {
			req, err = http.NewRequest("POST", urlCb, bytes.NewBufferString(Config.Body))
		} else {
			req, err = http.NewRequest("GET", urlCb, nil)
		}
		if err != nil {
			msg := errorString + err.Error() + "\n"
			Print(msg, Red)
			return errors.New(msg)
		}

		setRequest(req, Config.DoPost, "", http.Cookie{})
		waitLimiter(errorString)
		resp, err := http.DefaultClient.Do(req)
		if err != nil {
			msg := errorString + err.Error() + "\n"
			Print(msg, Red)
			return errors.New(msg)
		}
		defer resp.Body.Close()

		firstUnix := time.Now().Unix()

		if resp.StatusCode != Config.Website.StatusCode {
			msg := errorString + fmt.Sprintf("Unexpected Status Code %d\n", resp.StatusCode)
			Print(msg, Yellow)
		}

		indicValue := strings.TrimSpace(strings.ToLower(resp.Header.Get(cache.Indicator)))
		if !checkCacheMiss(indicValue) {
			msg := fmt.Sprintf("%s was not successful (Parameter)\n", identifier)
			Print(msg, NoColor)
		} else {
			urlCb, _ = addCachebusterParameter(Config.Website.Url.String(), "")

			if Config.DoPost {
				req, err = http.NewRequest("POST", urlCb, bytes.NewBufferString(Config.Body))
			} else {
				req, err = http.NewRequest("GET", urlCb, nil)
			}
			if err != nil {
				msg := errorString + err.Error() + "\n"
				Print(msg, Red)
				return errors.New(msg)
			}

			setRequest(req, Config.DoPost, "", http.Cookie{})
			waitLimiter(errorString)

			secondUnix := time.Now().Unix()
			timeDiff := secondUnix - firstUnix
			// make sure that there is at least 2 sec difference.
			// So that first req has Age=0 and second req has Age>=2
			if timeDiff <= 1 && strings.EqualFold("age", cache.Indicator) {
				time.Sleep(2 * time.Second)
			}

			resp, err = http.DefaultClient.Do(req)
			if err != nil {
				msg := errorString + err.Error() + "\n"
				Print(msg, Red)
				return errors.New(msg)
			}
			defer resp.Body.Close()

			if resp.StatusCode != Config.Website.StatusCode {
				msg := fmt.Sprintf("Unexpected Status Code %d\n", resp.StatusCode)
				Print(msg, Yellow)
			}

			indicValue = strings.TrimSpace(strings.ToLower(resp.Header.Get(cache.Indicator)))
			if checkCacheHit(indicValue) {
				msg := fmt.Sprintf("%s was not successful (Parameter)\n", identifier)
				Print(msg, NoColor)
			} else {
				cache.CBwasFound = true
				cache.CBisParameter = true
				cache.CBName = Config.CacheBuster
				msg := fmt.Sprintf("%s was successful (Parameter)\n", identifier)
				Print(msg, Blue)
			}
		}
	}

	return nil
}

/* Simple get request to get the body of a normal response and the cookies */
func GetWebsite(requrl string, setStatusCode bool) (WebsiteStruct, error) {
	var cache CacheStruct
	var web WebsiteStruct

	errorString := "GetWebsite: "

	queryParameterMap := make(map[string]string)

	// get domain
	domainParts := strings.SplitN(requrl, "/", 4)
	domain := domainParts[0] + "//" + domainParts[2]

	// splitting url like {https://www.m10x.de/}?{name=max&role=admin}
	urlSlice := strings.SplitN(requrl, "?", 2)

	// splitting queries like {name=max}&{role=admin}
	var parameterSlice []string
	if strings.Contains(requrl, "?") {
		parameterSlice = strings.Split(urlSlice[1], Config.QuerySeperator)
	}

	if len(parameterSlice) > 0 {
		queryParameterMap = setQueryParameterMap(queryParameterMap, parameterSlice)
	}

	if len(Config.Parameters) > 0 {
		queryParameterMap = setQueryParameterMap(queryParameterMap, Config.Parameters)
	}

	requrl = urlSlice[0]
	urlNoQueries := urlSlice[0]

	// adding query parameter
	for key, val := range queryParameterMap {
		if !strings.Contains(requrl, "?") {
			requrl += "?"
		} else {
			requrl += Config.QuerySeperator
		}
		requrl += key + "=" + val
	}

	var req *http.Request
	var err error
	if Config.DoPost {
		req, err = http.NewRequest("POST", requrl, bytes.NewBufferString(Config.Body))
	} else {
		req, err = http.NewRequest("GET", requrl, nil)
	}
	if err != nil {
		msg := errorString + err.Error() + "\n"
		Print(msg, Red)
		return web, errors.New(msg)
	}

	cb := ""
	if setStatusCode {
		cb = randInt()
	}
	setRequest(req, Config.DoPost, cb, http.Cookie{})

	waitLimiter(errorString)
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		msg := errorString + err.Error() + "\n"
		Print(msg, Red)
		return web, errors.New(msg)
	}

	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		msg := errorString + err.Error() + "\n"
		Print(msg, Red)
		return web, errors.New(msg)
	}

	weburl, err := url.Parse(requrl)
	if err != nil {
		msg := errorString + err.Error() + "\n"
		Print(msg, Red)
		return web, errors.New(msg)
	}

	tempStatusCode := Config.StatusCode
	// Only overwrite statuscode if 1. it wasn't set via flag 2. its the first and only request or the second of two requests
	if tempStatusCode == -1 {
		tempStatusCode = resp.StatusCode

		if setStatusCode {
			msg := fmt.Sprintf("The default status code was set to %d\n", tempStatusCode)
			Print(msg, NoColor)
		}
	}

	if setStatusCode {
		cache = Config.Website.Cache
	}

	// if retrieveCookies is false, only the specified cookies will be used
	// otherwise the by the server given cookies AND the specified cookies will be used
	cookiesWebsite := Config.Website.Cookies
	if !Config.DeclineCookies && !setStatusCode {
		cookiesWebsite = append(cookiesWebsite, resp.Cookies()...)
	}

	//weburl.Host:		m.avito.ru
	//weburl.Path:		/
	//weburl.Hostname():m.avito.ru
	//weburl.String():	https://m.avito.ru/?test=12
	//domain:			https://m.avito.ru
	//urlNoQueries:		https://m.avito.ru/

	web = WebsiteStruct{
		Headers:      resp.Header,
		Body:         string(body),
		Cookies:      cookiesWebsite,
		StatusCode:   tempStatusCode,
		Url:          weburl,
		UrlWOQueries: urlNoQueries,
		Queries:      queryParameterMap,
		Cache:        cache,
		Domain:       domain,
		//make map doesnt work here. is now in main method
		//Added:      make(map[string]bool),
	}

	return web, nil
}

func getStatusCode() int {
	var req *http.Request
	var err error
	errorString := "Testing for status code: "
	webUrl := strings.TrimSuffix(Config.Website.Url.String(), "?")

	if Config.DoPost {
		req, err = http.NewRequest("POST", webUrl, bytes.NewBufferString(Config.Body))
	} else {
		req, err = http.NewRequest("GET", webUrl, nil)
	}
	if err != nil {
		msg := errorString + err.Error() + "\n"
		Print(msg, Yellow)
		return -1
	}

	setRequest(req, Config.DoPost, randInt(), http.Cookie{})
	waitLimiter(errorString)
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		msg := errorString + err.Error() + "\n"
		Print(msg, Yellow)
		return -1
	}

	return resp.StatusCode
}

func setQueryParameterMap(queryParameterMap map[string]string, querySlice []string) map[string]string {
	for _, q := range querySlice {
		q = strings.TrimSuffix(q, "\r")
		q = strings.TrimSpace(q)
		if q == "" {
			continue
		} else if !strings.Contains(q, "=") {
			msg := fmt.Sprintf("Specified parameter %s doesn't contain a = and will be skipped\n", q)
			Print(msg, Yellow)
			continue
		} else {
			query := strings.SplitN(q, "=", 2)
			// ok is true, if a query already is set
			val, ok := queryParameterMap[query[0]]
			if ok {
				msg := fmt.Sprintf("Overwriting %s=%s with %s=%s\n", query[0], val, query[0], query[1])
				Print(msg, NoColor)
			}
			queryParameterMap[query[0]] = query[1]
		}
	}

	return queryParameterMap
}

func addDomain(x string, domain string) string {
	if strings.HasPrefix(x, "#") || strings.HasPrefix(x, "mailto:") {
		return ""
	}
	if strings.HasPrefix(x, "https://"+domain) || strings.HasPrefix(x, "http://"+domain) {
		return x
	} else if strings.HasPrefix(x, "//") {
		return Config.Website.Domain + x[1:]
	} else if !strings.HasPrefix(x, "http://") && !strings.HasPrefix(x, "https://") {
		if strings.HasPrefix(x, "/") {
			return Config.Website.Domain + x
		}
		return Config.Website.Domain + "/" + x
	} else {
		for i, d := range Config.RecDomains {
			if Config.RecDomains[i] == "" {
				continue
			}
			if strings.HasPrefix(x, "https://"+d) || strings.HasPrefix(x, "http://"+d) {
				return x
			}
		}

		msg := fmt.Sprintf("%s doesn't have %s as domain\n", x, domain)
		PrintVerbose(msg, NoColor, 1)

		return ""
	}
}

func checkRecInclude(x string, recInclude string) bool {
	for _, inc := range strings.Split(recInclude, " ") {
		// remove spaces and skip if someone used multiple spaces instead of one
		// TODO: is it necessary to trim spaces here after splitting for spaces?
		inc = strings.TrimSpace(inc)
		if inc == "" {
			continue
		}
		if strings.Contains(x, inc) {
			return true
		}
	}
	return false
}

func addUrl(urls []string, url string, added map[string]bool, excluded map[string]bool) []string {
	url = addDomain(url, Config.Website.Url.Hostname())

	if url != "" {
		// Check if url isnt added yet and if it satisfies RecInclude (=contains it)
		if excluded[url] {
			msg := fmt.Sprintf("Skipped to add %s to the queue, because it is on the exclude list\n", url)
			PrintVerbose(msg, NoColor, 1)
		} else if added[url] {
			msg := fmt.Sprintf("Skipped to add %s to the queue, because it was already added\n", url)
			PrintVerbose(msg, NoColor, 2)
		} else if Config.RecInclude == "" || checkRecInclude(url, Config.RecInclude) {
			urls = append(urls, url)
			added[url] = true
		} else {
			msg := fmt.Sprintf("Skipped to add %s to the queue, because it doesn't satisfy RecInclude\n", url)
			PrintVerbose(msg, NoColor, 1)
		}
	}

	return urls
}

func CrawlUrls(added map[string]bool, excluded map[string]bool) []string {
	bodyReader := strings.NewReader(Config.Website.Body)
	tokenizer := html.NewTokenizer(bodyReader)

	var urls []string

	eof := false
	for !eof {
		tokentype := tokenizer.Next()

		switch {
		case tokentype == html.StartTagToken:

			token := tokenizer.Token()

			if token.Data == "a" {
				for _, a := range token.Attr {
					if a.Key == "href" {
						urls = addUrl(urls, a.Val, added, excluded)
						break
					}
				}
			} else if token.Data == "script" {
				for _, a := range token.Attr {
					if a.Key == "src" {
						urls = addUrl(urls, a.Val, added, excluded)
						break
					}
				}
			}

		// When EOF is reached a html.ErrorToken appears
		case tokentype == html.ErrorToken:
			err := tokenizer.Err()
			if err == io.EOF {
				eof = true
				break
			}
			msg := fmt.Sprintf("error tokenizing HTML: %+v", tokenizer.Err())
			Print(msg, Yellow)
		}
	}

	if h := Config.Website.Headers.Get("Location"); h != "" {
		urls = addUrl(urls, h, added, excluded)
	}

	return urls
}
