package pkg

import (
	"encoding/json"
	"log"
	"net/http"
)

type Result struct {
	Technique  string `json:"technique"`
	Vulnerable bool   `json:"vulnerable"`
	//Detail     string    `json:"detail"`
	Requests []Request `json:"requests"`
}

type Request struct {
	URL    string      `json:"url"`
	Header http.Header `json:"header"`
	Body   string      `json:"body,omitempty"`
}

type Report struct {
	Name         string `json:"name"`
	Version      string `json:"version"`
	HasError     bool   `json:"hasError"`
	ErrorMessage string `json:"errorMessage"`
	Vulnerable   bool   `json:"vulnerable"`
	Duration     string `json:"duration"`

	Results []Result `json:"results,omitempty"`

	// Pointer for Structs which shall be omitted when empty
	Config *Config `json:"config,omitempty"`
}

func init() {

}

func ExportReport(report Report) {

	j, err := json.MarshalIndent(report, "", "    ")
	if err != nil {
		log.Fatalf("Error occured during marshalling. Error %s", err.Error())
	}

	log.Printf("\nreport JSON:\n%s\n", string(j))

	// https://golangbyexample.com/check-if-file-or-directory-exists-go/
}
