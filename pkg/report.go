package pkg

import (
	"encoding/json"
	"log"
	"net/http"
	"os"
	"strings"
)

type Result struct {
	Technique  string `json:"technique"`
	Vulnerable bool   `json:"vulnerable"`
	//Detail     string    `json:"detail"`
	Requests []Request `json:"requests"`
}

type Request struct {
	URL    string      `json:"url"`
	Header http.Header `json:"header"`
	Body   string      `json:"body,omitempty"`
}

type Report struct {
	Name         string `json:"name"`
	Version      string `json:"version"`
	HasError     bool   `json:"hasError"`
	ErrorMessage string `json:"errorMessage"`
	Vulnerable   bool   `json:"vulnerable"`
	Date         string `json:"date"`
	Duration     string `json:"duration"`

	Results []Result `json:"results,omitempty"`

	// Pointer for Structs which shall be omitted when empty
	Config *Config `json:"config,omitempty"`
}

func init() {

}

func ExportReport(report Report) {

	reportPath := report.Config.ReportPath
	if reportPath == "" || strings.HasSuffix(reportPath, "/") || strings.HasSuffix(reportPath, "\\") {
		fileName := report.Date + "_WCVS_Report"
		reportPath += fileName
	}

	_, err := os.Stat(reportPath)

	var file *os.File
	defer file.Close()

	if !os.IsNotExist(err) {
		log.Printf("The file %s will be overwritten, as it already exists", reportPath)
		//TODO: open file so it can write to it
		//os.OpenFile()
	} else {
		file, err = os.Create(reportPath)
		if err != nil {
			log.Fatalln(err)
		}
	}

	j, err := json.MarshalIndent(report, "", "    ")
	if err != nil {
		log.Fatalf("Error occured during marshalling. Error %s", err.Error())
	}

	file.WriteString(string(j))
	log.Printf("Exported report %s\n", reportPath)

	// https://golangbyexample.com/check-if-file-or-directory-exists-go/
}
