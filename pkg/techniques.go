package pkg

import (
	"bytes"
	"io/ioutil"
	"log"
	"net/http"
	"strings"
	"sync"
)

var impactfulQueries []string

func init() {

}

func setReportRequest(req *http.Request, body string) Request {
	var request Request
	request.URL = req.URL.String()
	request.Header = req.Header
	request.Method = req.Method
	request.Body = body

	return request
}

/* Scan cookies for poisoning */
func ScanCookies(client http.Client, config Config) Result {
	var result Result
	result.Technique = "Cookies"
	for i := 0; i < len(config.Website.Cookies); i++ {
		poison := randInt()
		log.Println("Checking cookie", config.Website.Cookies[i].Name)

		urlCb, cb := addCacheBuster(config.Website.Url.String(), "", config.CacheBuster)

		errorMessage := config.Website.Cookies[i].String() + "=" + config.Website.Cookies[i].Value

		var req *http.Request
		var err error
		if config.DoPost {
			req, err = http.NewRequest("POST", urlCb, bytes.NewBufferString(config.Body))
		} else {
			req, err = http.NewRequest("GET", urlCb, nil)
		}
		if err != nil {
			log.Fatalln(errorMessage, err)
		}

		log.Printf("Overwriting %s=%s with %s=%s\n", config.Website.Cookies[i].Name, config.Website.Cookies[i].Value, config.Website.Cookies[i].Name, poison)
		oldValue := config.Website.Cookies[i].Value
		config.Website.Cookies[i].Value = poison

		setRequest(req, config.DoPost, config)

		resp, err := client.Do(req)
		if err != nil {
			log.Fatalln(errorMessage, err)
		}
		defer resp.Body.Close()

		if resp.StatusCode != config.Website.StatusCode {
			log.Printf("Unexpected Status Code %d for %s=%s\n", resp.StatusCode, config.Website.Cookies[i], config.Website.Cookies[i].Value)
		}

		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Fatalln(errorMessage, err)
		}

		config.Website.Cookies[i].Value = oldValue

		//TODO: Compare (at first) ContentLength instead of whole body?
		if string(body) == config.Website.Body {
			continue
		}

		request := setReportRequest(req, config.Body)

		if config.DoPost {
			req, err = http.NewRequest("POST", urlCb, bytes.NewBufferString(config.Body))
		} else {
			req, err = http.NewRequest("GET", urlCb, nil)
		}
		if err != nil {
			log.Fatalln(errorMessage, err)
		}

		setRequest(req, config.DoPost, config)
		resp, err = client.Do(req)
		if err != nil {
			log.Fatalln(errorMessage, err)
		}
		defer resp.Body.Close()

		if resp.StatusCode != config.Website.StatusCode {
			log.Printf("Unexpected Status Code %d for %s=%s\n", resp.StatusCode, config.Website.Cookies[i], config.Website.Cookies[i].Value)
		}

		body, err = ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Fatalln(errorMessage, err)
		}

		if strings.Contains(string(body), poison) {
			log.Println("")
			log.Printf("------- Cookie %s was successfully poisoned!!! cb: %s poison: %s -------\n%s\n", config.Website.Cookies[i].Name, cb, poison, req.URL)

			result.Vulnerable = true
			result.Requests = append(result.Requests, request)
		}
	}
	return result
}

/* Scan X-Forward headers for poisoning */
func ScanXForwardHeaders(client http.Client, config Config) Result {
	var result Result
	result.Technique = "X-Forward"

	poison := randInt()

	urlCb, cb := addCacheBuster(config.Website.Url.String(), "", config.CacheBuster)

	var req *http.Request
	var err error
	if config.DoPost {
		req, err = http.NewRequest("POST", urlCb, bytes.NewBufferString(config.Body))
	} else {
		req, err = http.NewRequest("GET", urlCb, nil)
	}
	if err != nil {
		log.Fatalln(err)
	}

	setRequest(req, config.DoPost, config)

	if h := req.Header.Get("X-Forwarded-Host"); h != "" {
		log.Println("Overwriting X-Forwarded-Host" + ":" + h + " with X-Forwarded-Host:" + poison)
		req.Header.Set("X-Forwarded-Host", poison)
	} else {
		req.Header.Add("X-Forwarded-Host", poison)
	}
	if h := req.Header.Get("X-Forwarded-Scheme"); h != "" {
		log.Println("Overwriting X-Forwarded-Scheme" + ":" + h + " with X-Forwarded-Scheme:nothttps")
		req.Header.Set("X-Forwarded-Scheme", "nothttps")
	} else {
		req.Header.Add("X-Forwarded-Scheme", "nothttps")
	}

	resp, err := client.Do(req)
	if err != nil {
		log.Fatalln(err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != config.Website.StatusCode {
		log.Printf("Unexpected Status Code %d\n", resp.StatusCode)
	}

	request := setReportRequest(req, config.Body)

	//TODO: Check first request, if second is necessary?
	if config.DoPost {
		req, err = http.NewRequest("POST", urlCb, bytes.NewBufferString(config.Body))
	} else {
		req, err = http.NewRequest("GET", urlCb, nil)
	}
	if err != nil {
		log.Fatalln(err)
	}

	setRequest(req, config.DoPost, config)
	resp, err = client.Do(req)
	if err != nil {
		log.Fatalln(err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != config.Website.StatusCode {
		log.Printf("Unexpected Status Code %d\n", resp.StatusCode)
	}

	if strings.Contains(resp.Header.Get("Location"), poison) || strings.Contains(req.Host, poison) {
		log.Println("")
		log.Println("------- X-Forwarded-Host and X-Forwarded-Scheme was successfully poisoned!!! cb:", cb, "poison:", poison, "-------\n", req.URL)

		result.Vulnerable = true
		result.Requests = append(result.Requests, request)
	}

	return result
}

/* Scan headers for poisoning */
func ScanHeaders(client http.Client, headerList []string, config Config) Result {
	var result Result
	result.Technique = "Headers"

	//c := make(chan result) //<- needed?
	sem := make(chan int, config.Threads)
	var wg sync.WaitGroup
	wg.Add(len(headerList))

	for i, s := range headerList {
		if s == "" {
			if config.Verbosity >= 2 {
				log.Printf("Skipping empty header (%d/%d) %s\n", i+1, len(headerList), s)
			}
			wg.Done()
			continue
		}

		poison := randInt()

		go func(i int, s string, poison string) {
			defer wg.Done()
			sem <- 1

			s = strings.Trim(s, "\r")

			if config.Verbosity >= 2 {
				log.Printf("Testing now (%d/%d) %s\n", i+1, len(headerList), s)
			}

			urlCb, cb := addCacheBuster(config.Website.Url.String(), "", config.CacheBuster)
			var req *http.Request
			var err error
			if config.DoPost {
				req, err = http.NewRequest("POST", urlCb, bytes.NewBufferString(config.Body))
			} else {
				req, err = http.NewRequest("GET", urlCb, nil)
			}
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			setRequest(req, config.DoPost, config)

			if h := req.Header.Get(s); h != "" {
				log.Printf("Overwriting %s:%s with %s:%s\n", s, h, s, poison)
				req.Header.Set(s, poison)
			} else {
				req.Header.Add(s, poison)
			}

			resp, err := client.Do(req)
			if err != nil {
				<-sem
				log.Println(s, err)
				return
			}
			request := setReportRequest(req, config.Body)

			if resp.StatusCode != config.Website.StatusCode {
				log.Printf("Unexpected Status Code %d for header %s=%s\n", resp.StatusCode, s, poison)
			}

			defer resp.Body.Close()
			body, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			if string(body) == config.Website.Body {
				<-sem
				return
			}

			if config.DoPost {
				req, err = http.NewRequest("POST", urlCb, bytes.NewBufferString(config.Body))
			} else {
				req, err = http.NewRequest("GET", urlCb, nil)
			}
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			setRequest(req, config.DoPost, config)
			resp, err = client.Do(req)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}
			defer resp.Body.Close()

			if resp.StatusCode != config.Website.StatusCode {
				log.Printf("Unexpected Status Code %d for header %s\n", resp.StatusCode, s)
			}

			body, err = ioutil.ReadAll(resp.Body)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			if strings.Contains(string(body), poison) {
				log.Println("")
				log.Printf("------- Header %s was successfully poisoned!!! cb: %s poison: %s -------\n%s\n", s, cb, poison, req.URL)

				result.Vulnerable = true
				result.Requests = append(result.Requests, request)
			}

			<-sem
		}(i, s, poison)

	}
	wg.Wait()

	return result
}

/* Scan query parameters for poisoning */
func ScanParameters(client http.Client, parameterList []string, config Config) Result {
	var result Result
	result.Technique = "Parameters"

	//c := make(chan result) //<- needed?
	sem := make(chan int, config.Threads)
	var wg sync.WaitGroup
	wg.Add(len(parameterList))

	impactfulQueries = nil

	for i, s := range parameterList {
		if s == "" {
			if config.Verbosity >= 2 {
				log.Printf("Skipping empty query (%d/%d) %s\n", i+1, len(parameterList), s)
			}
			wg.Done()
			continue
		}

		poison := randInt()

		go func(i int, s string, poison string) {
			defer wg.Done()
			sem <- 1

			s = strings.Trim(s, "\r")

			if config.Verbosity >= 2 {
				log.Printf("Testing now Parameter (%d/%d) %s\n", i+1, len(parameterList), s)
			}

			var urlCb, cb string
			if _, ok := config.Website.Queries[s]; ok {
				// if the query to add is already present
				queryParameterMap := make(map[string]string)

				for key, val := range config.Website.Queries {
					queryParameterMap[key] = val
				}

				log.Printf("Overwriting %s=%s with %s=%s\n", s, queryParameterMap[s], s, poison)
				queryParameterMap[s] = poison

				urlCb = config.Website.BaseUrlStr + "?"
				for key, val := range queryParameterMap {
					if !strings.HasSuffix(urlCb, "?") {
						urlCb += "&"
					}
					urlCb += key + "=" + val
				}

				urlCb, cb = addCacheBuster(urlCb+config.QuerySeperator, "", config.CacheBuster)
			} else {
				// if query isn't already present, just add it and the cachebuster
				urlCb = config.Website.Url.String()
				urlCb += s + "=" + poison + config.QuerySeperator
				urlCb, cb = addCacheBuster(urlCb, "", config.CacheBuster)
			}

			var req *http.Request
			var err error
			if config.DoPost {
				req, err = http.NewRequest("POST", urlCb, bytes.NewBufferString(config.Body))
			} else {
				req, err = http.NewRequest("GET", urlCb, nil)
			}
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			setRequest(req, config.DoPost, config)
			resp, err := client.Do(req)
			if err != nil {
				<-sem
				log.Println(s, err)
				return
			}
			defer resp.Body.Close()

			if resp.StatusCode != config.Website.StatusCode {
				log.Printf("Unexpected Status Code %d for parameter %s=%s\n", resp.StatusCode, s, poison)
			}

			body, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			// check if something changed
			if string(body) == config.Website.Body {
				<-sem
				return
			}

			request := setReportRequest(req, config.Body)

			impactfulQueries = append(impactfulQueries, s)

			// get urlCb with the cachebuster but without the poisoned query
			urlCb, cb = addCacheBuster(config.Website.Url.String(), cb, config.CacheBuster)

			if config.DoPost {
				req, err = http.NewRequest("POST", urlCb, bytes.NewBufferString(config.Body))
			} else {
				req, err = http.NewRequest("GET", urlCb, nil)
			}
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			setRequest(req, config.DoPost, config)
			resp, err = client.Do(req)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}
			defer resp.Body.Close()

			if resp.StatusCode != config.Website.StatusCode {
				log.Printf("Unexpected Status Code %d for parameter %s\n", resp.StatusCode, s)
			}

			body, err = ioutil.ReadAll(resp.Body)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			if strings.Contains(string(body), poison) {
				log.Println("")
				log.Printf("------- Query Parameter %s was successfully poisoned!!! cb: %s poison: %s -------\n%s\n", s, cb, poison, req.URL)

				result.Vulnerable = true
				result.Requests = append(result.Requests, request)
			}

			<-sem
		}(i, s, poison)

	}
	wg.Wait()

	return result
}

/* Check for fat GET */
func ScanFatGET(client http.Client, config Config) Result {
	var result Result
	result.Technique = "Fat GET"

	if len(impactfulQueries) == 0 {
		errMsg := "No impactful query parameters were found beforehand. Run the query parameter scan (maybe with a different wordlist)."
		log.Println(errMsg)
		result.HasError = true
		result.ErrorMessage = errMsg
		return result
	}

	//c := make(chan result) //<- needed?
	sem := make(chan int, config.Threads)
	var wg sync.WaitGroup
	wg.Add(len(impactfulQueries))

	for i, s := range impactfulQueries {

		poison := randInt()

		// basic fat get technique
		go func(i int, s string, poison string) {
			defer wg.Done()
			sem <- 1

			if config.Verbosity >= 2 {
				log.Printf("Testing now simple fat GET (%d/%d) %s\n", i+1, len(impactfulQueries), s)
			}

			urlCb, cb := addCacheBuster(config.Website.Url.String(), "", config.CacheBuster)

			var req *http.Request
			var err error

			req, err = http.NewRequest("GET", urlCb, bytes.NewBufferString(s+"="+poison))
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			setRequest(req, config.DoPost, config)
			resp, err := client.Do(req)
			if err != nil {
				<-sem
				log.Println(s, err)
				return
			}
			defer resp.Body.Close()

			if resp.StatusCode != config.Website.StatusCode {
				log.Printf("Unexpected Status Code %d for parameter %s\n", resp.StatusCode, s)
			}

			body, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			// check if something changed
			if string(body) == config.Website.Body {
				<-sem
				return
			}

			request := setReportRequest(req, config.Body)

			// get urlCb with the cachebuster but without the poisoned query
			urlCb, cb = addCacheBuster(config.Website.Url.String(), cb, config.CacheBuster)

			req, err = http.NewRequest("GET", urlCb, nil)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			setRequest(req, config.DoPost, config)
			resp, err = client.Do(req)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}
			defer resp.Body.Close()

			if resp.StatusCode != config.Website.StatusCode {
				log.Printf("Unexpected Status Code %d for parameter %s\n", resp.StatusCode, s)
			}

			body, err = ioutil.ReadAll(resp.Body)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			if strings.Contains(string(body), poison) {
				log.Println("")
				log.Printf("------- Query Parameter %s was successfully poisoned via simple fat GET!!! cb: %s poison:%s -------\n%s\n", s, cb, poison, req.URL)

				result.Vulnerable = true
				result.Requests = append(result.Requests, request)
			}

			<-sem
		}(i, s, poison)
	}
	wg.Wait()
	wg.Add(len(impactfulQueries))
	log.Println()
	for i, s := range impactfulQueries {

		poison := randInt()

		// X-HTTP-Method-Override fat get technique
		go func(i int, s string, poison string) {
			defer wg.Done()
			sem <- 1

			if config.Verbosity >= 2 {
				log.Printf("Testing now X-HTTP-Method-Override fat GET (%d/%d) %s\n", i+1, len(impactfulQueries), s)
			}

			urlCb, cb := addCacheBuster(config.Website.Url.String(), "", config.CacheBuster)

			var req *http.Request
			var err error

			req, err = http.NewRequest("GET", urlCb, bytes.NewBufferString(s+"="+poison))
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			//true so ContentType will be set
			setRequest(req, true, config)

			if h := req.Header.Get("X-HTTP-Method-Override"); h != "" {
				log.Printf("Overwriting X-HTTP-Method-Override: %s with X-HTTP-Method-Override:%s\n", h, poison)
				req.Header.Set("X-HTTP-Method-Override", "POST")
			} else {
				req.Header.Add("X-HTTP-Method-Override", "POST")
			}

			resp, err := client.Do(req)
			if err != nil {
				<-sem
				log.Println(s, err)
				return
			}
			defer resp.Body.Close()

			if resp.StatusCode != config.Website.StatusCode {
				log.Printf("Unexpected Status Code %d for parameter %s\n", resp.StatusCode, s)
			}

			body, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			// check if something changed
			if string(body) == config.Website.Body {
				<-sem
				return
			}

			request := setReportRequest(req, config.Body)

			// get urlCb with the cachebuster but without the poisoned query
			urlCb, cb = addCacheBuster(config.Website.Url.String(), cb, config.CacheBuster)

			req, err = http.NewRequest("GET", urlCb, nil)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			setRequest(req, config.DoPost, config)
			resp, err = client.Do(req)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}
			defer resp.Body.Close()

			if resp.StatusCode != config.Website.StatusCode {
				log.Printf("Unexpected Status Code %d for parameter %s\n", resp.StatusCode, s)
			}

			body, err = ioutil.ReadAll(resp.Body)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			if strings.Contains(string(body), poison) {
				log.Println("")
				log.Printf("------- Query Parameter %s was successfully poisoned via X-HTTP-Method-Override fat GET!!! cb:%s poison:%s-------\n%s\n", s, cb, poison, req.URL)

				result.Vulnerable = true
				result.Requests = append(result.Requests, request)
			}

			<-sem
		}(i, s, poison)
	}
	wg.Wait()
	wg.Add(len(impactfulQueries))
	log.Println()
	for i, s := range impactfulQueries {

		poison := randInt()

		// basic fat get technique. Also add go func for POST technique and X-Override-HTTP-Method:POST technique
		go func(i int, s string, poison string) {
			defer wg.Done()
			sem <- 1

			if config.Verbosity >= 2 {
				log.Printf("Testing now POST fat GET (%d/%d) %s\n", i+1, len(impactfulQueries), s)
			}

			urlCb, cb := addCacheBuster(config.Website.Url.String(), "", config.CacheBuster)

			var req *http.Request
			var err error

			req, err = http.NewRequest("POST", urlCb, bytes.NewBufferString(s+"="+poison))
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			// True so ContentType will be set
			setRequest(req, true, config)

			resp, err := client.Do(req)
			if err != nil {
				<-sem
				log.Println(s, err)
				return
			}
			defer resp.Body.Close()

			if resp.StatusCode != config.Website.StatusCode {
				log.Printf("Unexpected Status Code %d for parameter %s\n", resp.StatusCode, s)
			}

			body, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			// check if something changed
			if string(body) == config.Website.Body {
				<-sem
				return
			}

			request := setReportRequest(req, config.Body)

			// get urlCb with the cachebuster but without the poisoned query
			urlCb, cb = addCacheBuster(config.Website.Url.String(), cb, config.CacheBuster)

			req, err = http.NewRequest("GET", urlCb, nil)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			setRequest(req, config.DoPost, config)
			resp, err = client.Do(req)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}
			defer resp.Body.Close()

			if resp.StatusCode != config.Website.StatusCode {
				log.Printf("Unexpected Status Code %d for parameter %s\n", resp.StatusCode, s)
			}

			body, err = ioutil.ReadAll(resp.Body)
			if err != nil {
				<-sem
				log.Fatalln(s, err)
			}

			if strings.Contains(string(body), poison) {
				log.Println("")
				log.Printf("------- Query Parameter %s was successfully poisoned via simple fat GET!!! cb:%s poison:%s -------\n%s\n", s, cb, poison, req.URL)

				result.Vulnerable = true
				result.Requests = append(result.Requests, request)
			}

			<-sem
		}(i, s, poison)

	}
	wg.Wait()

	return result
}

/* Check for Parameter Cloaking */
func ScanParameterCloaking(client http.Client, config Config) Result {
	var result Result
	result.Technique = "Parameter Cloaking"

	if len(impactfulQueries) == 0 {
		errMsg := "No impactful query parameters were found beforehand. Run the query parameter scan (maybe with a different wordlist)."
		log.Println(errMsg)
		result.HasError = true
		result.ErrorMessage = errMsg
		return result
	} else {
		log.Println("The following parameters were found to be impactful and will be tested for parameter cloaking:", impactfulQueries)
	}

	utm_parameter := []string{"utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term"}
	unkeyed_parameter := []string{}

	urlCb, _ := addCacheBuster(config.Website.Url.String(), "", config.CacheBuster)

	var req *http.Request
	var err error

	/***********Check if urlCb already contains utm parameter.
				Check if ? or querySeperator is needed
	****************/

	// The first request is made so a cache miss is forced and the following responses will only
	//have a cache hit, if they are unkeyed
	req, err = http.NewRequest("GET", urlCb, nil)
	if err != nil {
		log.Fatalln("first request", err)
	}

	setRequest(req, config.DoPost, config)
	resp, err := client.Do(req)
	if err != nil {
		log.Println("first request", err)
		result.HasError = true
		result.ErrorMessage = "first request: " + err.Error()
		return result
	}
	defer resp.Body.Close()

	if resp.StatusCode != config.Website.StatusCode {
		log.Printf("Unexpected Status Code %d for first request\n", resp.StatusCode)
	}

	sem := make(chan int, config.Threads)
	var wg sync.WaitGroup

	if !config.Website.Cache.XCache {
		//Cant test if utm_parameter are unkeyed if X-Cache isn't set
		//So they will be all added as unkeyed_parameter
		log.Println("X-Cache isn't verbose. Can't check which utm_parameter is unkeyed, so all will be used")
		unkeyed_parameter = utm_parameter
	} else {
		//Test which utm_parameter are unkeyed
		//c := make(chan result) //<- needed?

		wg.Add(len(utm_parameter))
		for i, s := range utm_parameter {
			go func(i int, s string) {
				defer wg.Done()
				sem <- 1

				if config.Verbosity >= 2 {
					log.Printf("Testing now for unkeyed utm parameters (%d/%d) %s\n", i+1, len(utm_parameter), s)
				}

				var req *http.Request
				var err error

				// add utm parameter after cachebuster. give utm parameter nonsense value
				req, err = http.NewRequest("GET", urlCb+config.QuerySeperator+s+"=foobar", nil)
				if err != nil {
					<-sem
					log.Fatalln(s, err)
				}

				setRequest(req, config.DoPost, config)
				resp, err := client.Do(req)
				if err != nil {
					<-sem
					log.Println(s, err)
					return
				}
				defer resp.Body.Close()

				if resp.StatusCode != config.Website.StatusCode {
					log.Printf("Unexpected Status Code %d\n", resp.StatusCode)
				}

				if resp.Header.Get("x-cache") == "hit" {
					unkeyed_parameter = append(unkeyed_parameter, s)
				}

			}(i, s)
		}
		wg.Wait()
	}

	if len(unkeyed_parameter) == 0 {
		log.Println("No unkeyed utm parameters could be found. Parameter Cloaking is not possible using utm parameters")
	} else {
		log.Printf("The following utm parameters were found to be unkeyed and will be tested for parameter cloaking: %s\n", unkeyed_parameter)
	}

	cloak := ";"
	if config.QuerySeperator == ";" {
		cloak = "&"
	}

	for iu, u := range unkeyed_parameter {

		//test one unkeyed parameter with all impactfulQueries one after another
		wg.Add(len(impactfulQueries))

		for is, s := range impactfulQueries {

			poison := randInt()

			go func(iu int, u string, is int, s string, poison string) {
				defer wg.Done()
				sem <- 1

				if config.Verbosity >= 2 {
					log.Printf("Testing now Parameter Cloaking (%d/%d) %s%s%s\n", iu+is+1, len(impactfulQueries)*len(unkeyed_parameter), u, cloak, s)
				}

				urlCb, cb := addCacheBuster(config.Website.Url.String(), "", config.CacheBuster)

				var req *http.Request
				var err error

				req, err = http.NewRequest("GET", urlCb+config.QuerySeperator+u+"=foobar"+cloak+s+"="+poison, nil)
				if err != nil {
					<-sem
					log.Fatalln(s, err)
				}

				setRequest(req, config.DoPost, config)
				resp, err := client.Do(req)
				if err != nil {
					<-sem
					log.Println(s, err)
					return
				}
				defer resp.Body.Close()

				if resp.StatusCode != config.Website.StatusCode {
					log.Printf("Unexpected Status Code %d for parameter %s\n", resp.StatusCode, s)
				}

				body, err := ioutil.ReadAll(resp.Body)
				if err != nil {
					<-sem
					log.Fatalln(s, err)
				}

				// check if something changed
				if string(body) == config.Website.Body {
					<-sem
					return
				}

				request := setReportRequest(req, config.Body)

				// get urlCb with the cachebuster but without the poisoned query
				urlCb, cb = addCacheBuster(config.Website.Url.String(), cb, config.CacheBuster)

				req, err = http.NewRequest("GET", urlCb, nil)
				if err != nil {
					<-sem
					log.Fatalln(s, err)
				}

				setRequest(req, config.DoPost, config)
				resp, err = client.Do(req)
				if err != nil {
					<-sem
					log.Fatalln(s, err)
				}
				defer resp.Body.Close()

				if resp.StatusCode != config.Website.StatusCode {
					log.Printf("Unexpected Status Code %d for parameter %s\n", resp.StatusCode, s)
				}

				body, err = ioutil.ReadAll(resp.Body)
				if err != nil {
					<-sem
					log.Fatalln(s, err)
				}

				if strings.Contains(string(body), poison) {
					log.Println("")
					log.Printf("------- Query Parameter %s was successfully poisoned via Parameter Cloaking using %s!!! cb:%s poison:%s -------\n%s\n", s, u, cb, poison, req.URL)

					result.Vulnerable = true
					result.Requests = append(result.Requests, request)
				}

				<-sem
			}(iu, u, is, s, poison)
		}
		wg.Wait()
	}

	return result
}
